	Node* new_list = list;
	Node* prev1;
	Node* temp1; // left
	Node* prev2;
	Node* temp2; //right
	Node* after1;
	Node* temp_prev;
	for(k = (k-1)/3; k >= 1; k = (k-1)/3)
	{
		for(long j = k; j < size; j++)
		{
			long i = j;

			prev1 = new_list;
			for(long l = 1; l < i - k; l++)
			{
				prev1 = prev1->next;
			}
			if(i - k == 0)
			{
				temp1 = prev1; //when it's the head
			}
			else
			{
				temp1 = prev1->next;
			}

			prev2 = temp1;
			for(long l = 1; l < k; l++)
			{
				prev2 = prev2->next;
			}
			temp2 = prev2->next;
			
			if(i >= k)
			{
				*N_Cmp += 1;
			}
			while(i >= k && temp1->value > temp2->value)
			{
				if(k == 1)
				{
					temp1 ->next = temp2->next;
					temp2 ->next = temp1;
					if(i - k == 0)
					{
						prev2 = temp2;
						new_list = temp2;
					}
					else
					{
						prev2 = prev1;
						prev2 -> next = temp2;
					}
					prev1 = temp2;
				} //special case when k == 1
				else
				{
					//swap temp1 and temp2
					after1 = temp1->next;
					prev2->next = temp1;
					temp1->next = temp2->next;
					temp2->next = after1;
					if(temp1 == prev1) //temp1 is the head
					{
						new_list = temp2;
						prev1 = prev2;
						prev2 = temp2;
					}
					else
					{
						prev1 -> next = temp2;
						temp_prev = prev1;
						prev1 = prev2;
						prev2 = temp_prev;
					}
				}
					
				//update temp2 = temp1, find new temp1
				i -= k;
				if(i >= k)
				{
					prev1 = new_list;
					for(long l = 1; l < i - k; l++)
					{
						prev1 = prev1->next;
					}
					if(i - k == 0)
					{
						temp1 = prev1;
					}
					else
					{
						temp1 = prev1->next;
					}
					*N_Cmp += 1;
				}
				//update temp2 = temp1, find new temp1
			}
		}
	} //dont delete this bracket!


